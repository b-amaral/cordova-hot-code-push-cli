{"version":3,"sources":["../src/login.js"],"names":[],"mappings":";;;;;;;;;oBAAiB,MAAM;;;;sBACJ,QAAQ;;;;kBACZ,IAAI;;;;qBAEiB,SAAS;;AAE7C,IAAM,UAAU,GAAG,kBAAK,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,kBAAkB,CAAC,CAAC;AAChE,IAAM,SAAS,GAAG,kBAAK,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;;AAEzD,IAAM,MAAM,GAAG;AACb,YAAU,EAAE;AACV,OAAG,EAAE;AACH,iBAAW,EAAE,sBAAsB;AACnC,aAAO,EAAE,8CAA8C;AACvD,cAAQ,EAAE,IAAI;KACf;AACD,UAAM,EAAE;AACN,iBAAW,EAAE,0BAA0B;AACvC,aAAO,EAAE,2CAA2C;AACpD,cAAQ,EAAE,IAAI;KACf;GACF;CACF,CAAC;;AAEK,SAAS,OAAO,CAAC,OAAO,EAAE;AAC/B,gBAAc,EAAE,CAAC;;AAEjB,sBAAO,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC;AAC/B,sBAAO,OAAO,GAAG,gBAAgB,CAAC;AAClC,sBAAO,SAAS,GAAG,IAAI,CAAC;AACxB,sBAAO,KAAK,EAAE,CAAC;;AAEf,4CAAiB,MAAM,CAAC,CACrB,IAAI,CAAC,UAAA,OAAO;WAAI,sBAAU,SAAS,EAAE,OAAO,CAAC;GAAA,CAAC,CAC9C,IAAI,CAAC,IAAI,CAAC,CAAC;CACf;;AAED,SAAS,cAAc,GAAG;AACxB,MAAI,MAAM,YAAA,CAAC;;AAEX,MAAI;AACF,UAAM,GAAG,gBAAG,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;GAC9C,CAAC,OAAM,CAAC,EAAE;AACT,WAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAC;AAC5E,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB;;AAED,MAAI,CAAC,MAAM,EAAE;AACX,WAAO,CAAC,GAAG,CAAC,4EAA4E,CAAC,CAAC;AAC1F,WAAO,CAAC,GAAG,CAAC,yEAAyE,CAAC,CAAC;AACvF,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB;CACF;;AAED,SAAS,IAAI,CAAC,GAAG,EAAE;AACjB,MAAI,GAAG,EAAE;AACP,WAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;GACzB;;AAED,SAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;AACtE,SAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;AAC5D,SAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;CACtD","file":"login.js","sourcesContent":["import path from 'path';\r\nimport prompt from 'prompt';\r\nimport fs from 'fs';\r\n\r\nimport { getInput, writeFile } from './utils';\r\n\r\nconst configFile = path.join(process.cwd(), 'cordova-hcp.json');\r\nconst loginFile = path.join(process.cwd(), '.chcplogin');\r\n\r\nconst schema = {\r\n  properties: {\r\n    key: {\r\n      description: 'Amazon Access Key Id',\r\n      message: 'You need to provide the Amazon Access Key Id',\r\n      required: true,\r\n    },\r\n    secret: {\r\n      description: 'Amazon Secret Access Key',\r\n      message: 'You need to provide the Secret Access Key',\r\n      required: true,\r\n    },\r\n  },\r\n};\r\n\r\nexport function execute(context) {\r\n  validateConfig();\r\n\r\n  prompt.override = context.argv;\r\n  prompt.message = 'Please provide';\r\n  prompt.delimiter = ': ';\r\n  prompt.start();\r\n\r\n  getInput(prompt, schema)\r\n    .then(content => writeFile(loginFile, content))\r\n    .then(done);\r\n}\r\n\r\nfunction validateConfig() {\r\n  let config;\r\n\r\n  try {\r\n    config = fs.readFileSync(configFile, 'utf8');\r\n  } catch(e) {\r\n    console.log('Cannot parse cordova-hcp.json. Did you run cordova-hcp init?');\r\n    process.exit(0);\r\n  }\r\n\r\n  if (!config) {\r\n    console.log('You need to run \"cordova-hcp init\" before you can run \"cordova-hcp login\".');\r\n    console.log('Both commands needs to be invoked in the root of the project directory.');\r\n    process.exit(0); // eslint-disable-line no-process-exit\r\n  }\r\n}\r\n\r\nfunction done(err) {\r\n  if (err) {\r\n    return console.log(err);\r\n  }\r\n\r\n  console.log('Project initialized and .chcindex.plogin file created.');\r\n  console.log('You SHOULD add .chcplogin to your .gitignore');\r\n  console.log('( echo \\'.chcplogin\\' >> .gitignore )');\r\n}\r\n"]}